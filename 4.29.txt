디자인 패턴
소프트웨어 설계 과정에서 반복적으로 발생하는 문제를 해결하기 위한 재사용 가능한 설계 기법이다.

특정 언어나 플랫폼에 종속되는것이 아니라, 상황과 해법의 구조를 문서화한 유연한 설계도라고 생각하면 된다.

싱글톤 패턴
스프링이 직접 관리하도록 시킨 클래스는 메모리에 무조건 한번만 올라간다.

사용할 때는 메모리에 올라가 있는 객체를 받아서 사용한다.

팩토리 패턴
객체 생성 로직을 별도의 클래스로 분리하여, 클라이언트 코드가 구체적인 클래스에 의존하지 않도록 만드는 패턴

롬복(lombok)
어노테이션 기반의 코드 생성 라이브러리이다.
자바 클래스에서 반복생성되는코드(getter, setter, 생성자, toString)를 자동으로 생성해준다.
컴파일 시점에 어노테이션이 코드를 주입하므로, 실제 소스파일에는 메서드 구현이 보이지 않는다.

주요 어노테이션 및 역할
@Getter / @Setter : 필드별 getter/setter 메서드 생성
@ToString : toString()메서드 자동생성
@EqualsAndHashCode : equals() & hashCode() 메서드 생성
@NoArgsConstructor : 파라미터 없는 생성자 생성
@AllArgsConstructor : 모든 필드를 파라미터로 받는 생성자 생성
@RequiredArgsConstructor : final 또는 @Nonnull 필드만 파라미터로 받는 생성자 생성
@Builder : 빌더 패턴을 지원하는 빌드 클래스를 생성

의존성 주입(Dependency Injection)
객체가 필요한 의존관계를 외부에서 주입해주는 설계 원칙
'제어역전(Inversion of Control)'의 한 구현 방식으로, 객체 내부가 아니라 외부 컨테이너가 객체의 생명주기와 관계를 관리한다.

필드주입(Field Injection)
클래스의 필드에 @Autowired를 붙여, 스프링이 직접 주입해주는 방식
setter나 생성자 없이도 간단히 주입할 수 있다는 특징이 있다.

장점 : 필드 선언부에 어노테이션만 붙이면 되므로, 다른 코드가 거의 필요없다.
단점 : 불투명성 - 코드만 보고는 어떤의존성이 언제 주입되는지 파악하기 어렵다.
      불변성 미보장 - 초기화 전 필드가 null일 수 있다.

간단히 프로토타입을 빠르게 만들어볼 때 임시로 활용해볼 수 있다.


































