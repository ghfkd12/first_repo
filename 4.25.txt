비동기 처리
작업을 하는 동안 사이트의 다른곳을 이용할 수 있는 기능
작업이 완료될 때까지 서비스가 멈추지 않고 다른 코드나 작업을 계속해서 실행할 수 있게 해준다.
주로 useEffect와 같이 사용한다.

1. 콜백함수
콜백함수는 특정 작업이 완료된 후 호출되는 함수
function fetchData(callback) {
// setTimeout() : 지정된 시간동안 기다렸다가 안에있는 내용을 실행해라
  setTimeout(() => {
    const data = '서버에서 받은 데이터'
    callback(data) -> setTimeout이 실행되고 나서 실행되는 함수
  },2000)
}

fetchData((result) => {
  console.log('API 응답 : ', result)
})

함수의 작동원리
1. 함수를 선언한다.
2. 함수를 호출한다.(인자로 전달할거 있으면 같이 전달한다)
3. 함수를 선언한 쪽으로 올라가서 기능을 실행한다.
4. 함수안의 모든 내용이 끝나면 호출한 쪽으로 돌아와서 아래에 코드가 있으면 계속 진행한다.

2. Promise객체
비동기 작업이 완료 되었을 때 성공 또는 실패에 대한 결과를 반환하는 객체

Promise의 상태
Promise객체는 생성직후 pending상태이며, 비동기 작업이 성공하면
fullfilled, 실패하면 rejected상태로 바뀐다.

pending : 아직 결과가 결정되지 않은 초기 상태
fullfilled : 작업이 성공적으로 완료되어 결과 값을 반환한 상태
rejected : 작업이 실패하여 에러를 반환한 상태

.then() : 콜백이 호출되면 fullfilled 상태로 완료된 것이고,
.catch() : 콜백이 호출되면 rejected상태로 실패한것이다.

const promise = new Promise(콜백함수)

Promise의 콜백함수 종류
() => {} 부분이 콜백함수 이다.
const promise = new Promise((resolve, reject) => {})
1. 생성자에 넘기는 콜백함수
2. Promise객체가 생성될 때 즉시 실행이 된다.
3. resolve와 reject는 함수형 매개변수로 주어진다.

Promise체이닝
여러 비동기 작업을 순차적으로 연결할 때 유리하다.
.then()
.catch()
.finally()

3. async/await

async : 함수 앞에 async키워드를 붙임으로써 해당 함수를 비동기함수로 만드는 효과가 있다.
비동기 함수는 무조건 Promise객체를 반환한다.

async function fetchData() {
    return '데이터'
}

await : 비동기 함수 안에서 사용하는 키워드 Promise가 처리될 때 까지 함수의 실행을 일시적으로 중지한다.

const fetchData() => {
  return new Promise((resolve) => {
    setTimeout(() => {
    resolve('데이터 받아옴')
    },2000)
  })
}

async function getData() {
    console.log('api요청 시작')
    const data = await fetchData(); // 2초뒤에 데이터를 받아온다.
    console.log('다음 작업 시작')
}
console.log('끝')

비동기 통신을 할 때 사용하는 함수와 라이브러리

fetch()
요청하고 받아온 결과를 한 번더 가공을 해야한다
리액트에서 제공을 해주는 내장함수
fetch(url, 옵션)

axios()
받아온 결과를 받아서 바로 사용할 수 있다.
fetch()보다는 다양한 기능을 제공한다.
라이브러리이기 때문에 설치를 따로 해야한다.

axios(url,옵션)

함수를 실행하고 받은 결과는 promise객체이다.

비동기 통신을 하기위해선
요청과 응답
요청 : request
클라이언트가 서버에게 화면이나 데이터를 달라고 요청
HTTP요청 메서드  
GET : 조회 get방식으로 적을 때는 주소에 직접 적는다.
ex) api.example.com?id=xxx&&pw=xxx
POST : 추가
PUT : 수정
DELETE : 삭제 body에 실어서 보내야한다.
요청할 때 목적을 같이 보내야 한다.

응답 : response
서버가 클라이언트에게 데이터를 주거나 화면을 돌려준다.

axios({
  method : 'post',
  url : '/api/items',
  data : {  // post로 넘길땐 body데이터로 넘긴다.
    name : '새아이템'(${item}),
    price : 1000(${price}) // 고정값이 아닌 받아온 값으로 적어도 된다.
  }
})

context api : 데이터를 전역적으로 관리 한다.
리액트에 내장되어있어서 별도의 설치없이 사용 가능하다.

Redux
상태관리 라이브러리 
어플리케이션의 전역상태를 관리하는데 도움을 준다.
복잡한 리액트 어플리케이션에서는 여러 컴포넌트간 상태 공유가 어렵기 때문에
Redux를 사용해서 중앙 집중화된 store를 통해 상태를 효율적으로 관리할 수 있다.

핵심개념
스토어(store)
어플리케이션의 전역 상태를 관리하는 곳
createStore함수를 사용하여 스토어를 생성하고 어플리케이션 전반에서
상태를 유지하고 관리하는 역할

액션(Action)
상태를 변경하기 위해 발생시키는 이벤트를 의미한다.
액션은 객체형태로 {type : 'Action_TYPE', payload:데이터} 의 구조를 가진다.
type은 액션의 종류를 나타낸다.
payload는 해당 액션과 함께 전달할 추가 데이터를 나타낸다.

리듀스(Reducer)
상태를 변경하는 함수
현재 상태와 액션을 인자로 받아서 새로운 상태를 반환한다.
이 과정에서 상태를 직접 수정하지 않고, 항상 새로운 상태 객체를 반환하는것이 중요하다.

디스패치(Dispatch)
액션을 스토어에 전달하는 메서드
컴포넌트에서 디스패치를 통해 액션을 발생시키고, 리듀서가 상태를 업데이트 하도록 한다.

Redux의 필요성
상태를 중앙에서 관리하여 컴포넌트간의 의존성을 줄이고,
상태관리가 보다 예측 가능하고 유지보수하기 쉬워진다.

Redux의 동작원리
1. 스토어의 생성 : 애플리케이션의 state(상태)를 보관할 스토어를 생성한다.
2. 액션 디스패치 : 사용자가 기타 이벤트에 따라 액션을 디스패치한다.
3. 리듀서 호출 : 디스패치된 액션을 리듀서가 받아 새로운 state를 계산한다.
4. 상태 업데이트 : 스토어의 state가 업데이트되고, 이를 사용하고있는 컴포넌트들이 리렌더링 된다.

Redux를 선택할 때
애플리케이션의 상태관리가 복잡하거나 규모가 큰 경우
상태 변경 로직을 명확하게 분리하고 싶을 때

Context API를 선택할 때
상태관리가 비교적 간단하고 작은 규모의 프로젝트일 때
추가적인 라이브러리 설치 없이 빠르게 전역 상태를 관리하고 싶을 때
성능 최적화가 크게 필요하지 않을 때

react-redux
React에서 redux를 쉽게 사용할 수 있도록 돕는 바인딩 라이브러리이다.

Provider컴포넌트
어플리케이션 전체에 스토어를 제공한다.
최상위 컴포넌트를 감싸서 모든 자식 컴포넌트가 Redux 스토어에 접근할 수 있도록 해준다.

useSelector
redux스토어에서 상태를 선택하고 React컴포넌트에서 사용할 수 있게 한다.
스토어의 특정 상태를 선택해서 가져올 수 있다.

useDispatch
액션을 디스패치하는 함수로, 컴포넌트에서 액션을 발생시켜 상태를 변경할 수 있게 한다.













