인증

인증이 필요없는 화면 
AuthStack

인증이 필요한 화면
MainStack

웹
아이디/비밀번호를 입력해 로그인을 하면 토큰을 발급받는다.
ㄴ JWT를 이용해서 발급

인증이 필요한 페이지에 접근하려고 하면 요청(request)에 토큰을 같이 실어서 유효함을 인증

firebase의 기능
SignInWithEmailAndPassword()를 통해서 로그인을 하고 user객체를 돌려받는다.

user객체에 email, uid로그인한 유저를 검증할 수 있는 값을 받을 수 있다.

채널 생성 화면
- 채널 생성 화면을 만들고 생성된 채널을 파이어베이스로 관리해보자
- 현재 서버를 구축하지 않았기에 채널 데이터를 관리하기 위해 파이어베이스의 데이터베이스를 활용할것이다
- 파이어베이스에서 제공하는 퍼이어스토어는 NoSQL문서 중심의 데이터베이스로 SQL데이터베이스와 달리 테이블이나 행이 없고
  컬렉션, 문서, 필드 개념으로 구성되어 있다.

NoSQL
다양하고 유연한 데이터 모델을 활용하는 데이터베이스 기술을 총칭하는 용어이다.
Not Only SQL라는 의미를 가진다.
관계형 DB의 단점을 보완하거나 특정 요구사항을 효율적으로 처리하기위해 탄생했다.

탄생배경
1. 빅데이터 및 대규모 트래픽 처리 요규
- 인터넷 서비스가 폭발적으로 성장하면서, 데이터 양과 트랜잭션이 방대해졌다.
- 전통적 RDBMS를 대규모로 확장하려면 비용이 많이들고, 스키마 변경도 까다롭다.

2. 유연한 스키마의 필요성
- 웹/모바일 어플리케이션에서 데이터 형태가 자주 변하거나, 구조가 불규칙할 경우가 늘어남
- RDBMS는 스키마 변경 시 마잌그레이션이 필수이나, 개발 속도가 중요한 스타트업 환경 등에서는 비효율적이다.

3. 분산 시스템 설계
- 규모가 커질수록 수평확장(Scale-out)방식이 유리한데, RDBMS는 공유 저장소나 쿼리 복잡성 때문에 분산에 한계가 있다.

주요 특성
1. 수평 확장성
- 여러 노드(서버)로 데이터를 샤딩(Shading)해 저장하고 트래픽을 분산처리한다.
샤딩 : 데이터를 여러개의 노드로 나누어 저장하는 방식이다.

2. 유연한 스키마
- RDBMS의 테이블-행-열 구조와 달리 컬렉션-문서 구조나 키-값 구조등 다양한 형태를 지원한다.
- 구조를 사전에 엄격하게 정의하지 않아도 되므로 어플리케이션 요구사항 변동에 빠르게 대응이 가능하다.

3. 고성능 처리
- 단순 키-값 접근, 인덱스 최적화, 메모리 기반 저장등 다양한 기법으로 빠른 읽기/쓰기를 제공한다.

NoSQL의 유형

1. key-value 스토어
- 단순한 키,값 쌍으로 데이터를 저장
- 특징 : 빠른 읽기/쓰기 속도, 단순한 쿼리 모델

2. 문서(Document)기반
- JSON형태로 데이터를 저장

3. 컬럼(Column)기반
- 테이블처럼 보이지만, 각 행(row)이 매우 많은 컬럼들을 동적으로 갖거나, 특정 컬럼 패밀리로 묶어서 관리한다.
- 특징 : 수평 확장성이 뛰어나다
        대규모 쓰기/조회에 강하다.
        통신/로그/IoT 데이터 같은 시계열 처리에 많이 사용된다.

4. 그래프(Graph)기반
- 노드와 엣지 구조로, 관계를 1차적인 데이터 모델로 삼는다.
- 특징 : 그래프 탐색, 추천 알고리즘, 소셜 네트워크 분석, 경로찾기에 최적화

장점
높은 확장성
유연한 스키마
높은 성능

단점
관계 연산의 어려움 : JOIN같은 복잡한 관계 쿼리에 불리할 수 있다.
표준화 부족 : SQL처럼 표준화된 쿼리 언어가 없어, DB제품별로 API/쿼리 문법이 상이하다

문서기반 NoSQL
- 각 데이터를 독립적인 문서(Document)형태로 저장하는 비관계형 데이터베이스유형이다.
- 컬렉션, 문서, 필드 개념이 핵심이다.

컬렉션
- 여러 문서를 담는 논리적인 그룹
- 테이블과 유사한 개념으로, 특정 주제나 목적에 따라 문서들을 묶어서 보관하는 역할
- 사용자 관련 users 컬렉션, 제품 정보를 저장하는 products 컬렉션
특징
- 컬렉션에는 일정한 스키마가 강제되지 않는다.
- ex) : users컬렉션 안에 있는 각각의 문서가 서로 다른 필드를 가질 수도 있다.
- 일반적으로 컬렉션 이름만 지정하면 별도의 스키마 정의 없이도 문서를 생성/저장할 수 있다.
- 각 컬렉션별로 인덱스를 설정할 수 있으며, 효율적인 쿼리를 위해 필드에 인덱스를 걸 수 있다.

2. 문서(Document)
- 문서는 컬렉션 내의 저장되는 데이터의 실제 단위, 각 문서는 독립적인 객체형태이다.
- JSON형식을 사용하여 데이터를 구조화 한다.
- 관계형 데이터베이스에서 행(row)에 대응되지만, 훨씬 유연한 구조를 담을 수 있다.

- 문서의 구조
- 문서는 일반적으로 필드(Field)와 값(Value)쌍을 여러개 포함하는 JSON형태이다.
- 값에는 문자열, 숫자, 논리형, 배열, 객체(중첩문서)등 다양한 형태가 들어올 수 있다.

필드
- 문서 안에 있는 데이터 속성을 의미한다.
- ex) : 이름, 이메일, 나이, 주소 등 문서가 담고있는 각각의 속성이 필드가 된다.

자료형(타입)
- 문서 기반 DB는 다양한 자료형을 지원한다.
- 기본타입 : 문자열(String), 숫자(Number), 논리형(Boolean), 날짜(Date), Null 등
- 복합타입 : 배열(Array), 중첩 객체(Object), 이진 데이터(Binary)등 특정 필드는 한 문서에서는 문자열, 다른 문서에서는 숫자로 쓰는것도 가능은 하다(권장x)

FireStore
firebase에서 제공하는 NoSQL 클라우드 데이터베이스로, 일반적인 데이터베이스와 달리
데이터베이스의 내용이 수정되면 실시간으로 변경된 내용을 알 수 있다는 특징이 있다.

컬렉션과 문서는 항상 유일한 ID를 가지고 있어야 한다는 규칙이 있다.
channels라는 ID를 가진 하나의 컬렉션을 만들고 생성되는 채널들을 channels 컬렉션에 문서로 저장할것이다
파이어스토어는 채널 생성 시 ID를 지정하지 않으면 자동으로 중복되지 않는 ID를 생성해서 문서의 ID로 이용한다.
따라서 자동으로 생성되는 문서의 ID를 이용해 채널의 문서 ID가 중복되지 않도록 관리할 것이다.

인증에 성공한 사용자만 데이터베이스를 읽거나 쓸 수 있도록 데이터베이스의 보안규칙을 수정하자.



