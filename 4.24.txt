비동기 데이터 처리

- 작업이 시작된 후 결과를 기다리지 않고 즉시 다른 작업을 계속할 수 있는 프로그래밍 방식
- 주로 네트워크 요청(api의 호출), 파일 읽기, 타이머 등 시간이 오래
걸릴 수 있는 작업을 처리할 때 사용한다.
- 이 방식은 작업이 완료될 때까지 어플리케이션이 멈추지 않고,
다른 코드나 작업을 계속해서 실행할 수 있게 해준다.

비동기 처리가 중요한 이유
- 주로 시간이 오래걸리는 작업을 처리할 때 유용하다.
- 만약 시간이 오래걸리는 작업을 동기 방식으로 처리한다면, 작업이 완료될 때까지
어플리케이션이 멈추게 되어 사용자가 불편을 겪을 수 있다.
- 비동기 처리를 사용하면, 작업이 완료될 때까지 기다리는 동안에도 다른 작업을 실행할 수 있다.

비동기 처리의 주요 패턴

1. 콜백함수(Callback Function)
- 특정 작업이 완료된 후 호출되는 함수
- 외부 데이터 요청이 완료되었을 때 실행될 함수를 전달하여,
해당 작업이 끝난 후 처리하게할 수 있다.

2. Promise객체
- 비동기 작업이 완료 되었을 때 성공 또는 실패 결과를 반환하는 객체

3. async/ await
- Promise를 기반으로 한 비동기 처리방식으로, 동기처리 처럼 보이지만
비동기 작업을 수행할 수 있게 해준다.

async
함수 앞에 붙여서 해당 함수가 비동기 함수임을 나타낸다.
비동기 함수의 반환값은 항상 Promise객체이다.

await
- 비동기함수 안에서만 사용할 수 있으며, Promise가 처리될 때까지 함수를 일시적으로 중지한다.
- Promise가 resolve되면, 그 값을 반환받아 동기적으로 코드가 실행되는 것처럼 이어진다.

비동기처리의 장점
ui 반응성 유지 - 무거운 작업을 수행할 때도 어플리케이션이 멈추지 않고 계속해서 동작한다.

성능 최적화 - 네트워크 요청, 파일 읽기 등 시간이 오래걸리는 작업이 완료될 때까지 기다리지 않고,
다른작업을 동시에 수행할 수 있다.

사용자 경험 향상 - 데이터를 처리하거나 로딩하는 동안에도 어플리케이션이 반응하며,
사용자에게 즉각적인 피드백을 제공할 수 있다.

다른 서버와 통신을 할 때 많이 사용한다.
React에서 다른서버(API)와 통신하는 가장 기본적인 방법은
fetch API와 Axios라이브러리를 사용하는 것이다.

fetch API
브라우저에서 제공하는 비동기 네트워크 요청을 수행하는 기본 API이다.
Promise를 반환하며, 네트워크 요청의 성공 여부에 따라 성공 또는 실패 상태로 처리된다.

JSON(JavaScript Object Notation)
경량의 데이터 교환 형식으로, 사람도 읽기 쉽고, 기계도 구문을 분석하기 쉬운 텍스트이다.
주로 클라이언트와 서버간의 구조화된 데이터를 주고받거나, 설정파일, 로그 기록등에 널리 사용된다.

자바스크립트 객체
{name : "홍길동", age : 30}

json(key도 문자열로 감싸야한다)
{"name" : "홍길동", "age" : 30}

value에 들어갈 수 있는 타입
1. 문자열
2. 숫자(정수, 실수)
3. 논리형값(true, false)
4. null
5. 객체
6. 배열

axios
Promise기반의 HTTP요청 라이브러리
fetch api보다 사용법이 직관적이며, 여러가지 기능을 제공한다.

모든기능을 다 만들 수는 없어서
외부에서 데이터를 제공하는 것을 fetch나 axios를 통해서 요청을 하고 받아서 가공을 해서 사용한다.

사이트에서 무료로 오픈 api데이터를 제공을 할테지만, key를 발급을 받아야한다.

리액트에서 데이터 비동기 처리하기
게시판 화면으로 접근하면 게시판이 자동으로 렌더링되야 한다.
useEffect()훅을 사용하여 컴포넌트가 렌더링될 때 비동기 api요청을 수행하고 결과를 화면에 표시해보자.

fetch api로 데이터 가져오기
JSONPlaceholder의 게시글 데이터 가져오기
데이터가 로딩 중일 때는 "로딩중..."이라는 메세지를 보여주고,
데이터가 도착하면 목록으로 표시한다.

HTTP메서드
클라이언트가 서버에게 요청을 할 때 수행할 동작을 지정하는 것
각 메서드는 요청에 목적이 있다.
Get : 서버로부터 데이터를 조회한다.
Post : 서버에 데이터를보내 추가한다.
Put : 데이터를 수정한다.
Delete : 데이터를 삭제한다.

fetch(주소, 옵션)
옵션에 들어가는 항목 
method : 요청 메서드
headers : 요청 헤더
헤더
- 요청이나 응답 메시지의 메타데이터를 담고있는 "키 : 값" 쌍의 모음
- 클라이언트와 서버가 추가 정보를 주고받을 때 사용한다.
- ex) 서버에 보내는 데이터의 형식 : application/json
-> 'Content-Type' : 'applition/json'
-> 'Accept' : 'application/json' : 받고자 하는 데이터 형식
body : post,put,delete에서 서버에 데이터를 보낼 때 쓴다.

외부 api와 통신할 때 비동기를 많이 사용한다.
내가 만든 백엔드 서버와 통신할 때 많이 사용한다.































