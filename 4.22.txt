컴포넌트의 생명주기

1. 마운트(컴포넌트가 호출되서 화면에 보여질 때 - 최초렌더링)
2. 업데이트(컴포넌트가 재렌더링될 때)
3. 언마운트(호출되서 종료되고 화면에서 사라질 때)

useEffect(() => {함수},[의존성배열])
컴포넌트에서 부수효과(side effect)를 처리하기위한 함수
컴포넌트가 렌더링되면 첫번째인자에 들어있는 함수가 실행된다.

의존성배열
useEffect()의 실행타이밍을 결정
1. 만약 없다면, 렌더링이 될 때마다 useEffect를 실행한다(마운트+업데이트)
2. 빈배열 마운트시 한번만 실행된다.
3. 값명시
ex) [count, state] 배열안의 값이 바뀔때마다 실행된다.

클린업 함수
첫번째 인자에 들어있는 함수의 리턴함수
useEffect(() => {
  const id = setInterval(() => {
    console.log('1초마다 실행')
  } ,1000);

  클린업함수(언마운트 시점에 호출, 의존성 배열에 들어있는 값이 변경되어 사이드이펙트함수가 호출되기 직전 )
  return () => clearInterval(id);
}, [])

useRef()
변경가능한 값을 저장
DOM요소에 직접 접근할 때 사용
값이 바뀌어도 재렌더링이 일어나지 않는다.

const ref = useRef(initialValue)형태로 호출하면
ref -> {current : initialValue}가 들어있다고 보면 된다.
current라는 key값은 바뀌지 않는다.

라우터
리액트는 SPA(Single Page Application)라서, 하나의 html페이지에서
여러 컴포넌트를 교체하는식으로 동작을 한다.

여러 페이지를 가진 웹사이트처럼 URL에 따라 다른화면을 보여주고 싶을수도 있다.

사용자가 URL을 변경하거나 네비게이션을 할 때 페이지를 새로고침하지 않고도
URL에 맞는 컴포넌트를 렌더링 할 수 있도록 해준다.

라우터를 쓰는 이유
1. SPA의 특성을 유지
라우터를 사용하면 브라우저의 새로고침 없이도 URL을 변경하고
해당 URL에 맞는 컴포넌트를 렌더링할 수 있다.

2. 페이지 전환시 깜빡임 방지
MPA에서 사용자가 화면을 이동할 때마다 다시 로드하게되어 깜빡임이 발생한다.
라우터는 그런게 없다.

3. 브라우저의 히스토리 관리
브라우저의 히스토리를 api를 사용해서 뒤로가기, 앞으로 가기등의
네비게이션 기능을 정상적으로 동작하게 한다.

동적 라우팅
1. 주소창에 주소를 확인
2. path에서 일치하는 경로를 찾아서 컴포넌트를 렌더링

중첩 라우팅
라우트 안에 다른 라우트를 포함시켜서 공통 레이아웃이나
레이아웃 내 중첩된 뷰를 쉽게 구성하는 기법

리다이렉션
특정 조건에 따라 사용자를 다른페이지로 자동 이동시키는 기능

로그인 후 홈페이지로 리다이렉트하거나, 사용자가 존재하지 않는
페이지에 접근할 때 404페이지로 리다이렉트할 수 있다.
































