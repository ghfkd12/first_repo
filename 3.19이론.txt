JOIN
PK와 FK로 조인을 한다.
- INNER JOIN : 두 테이블에 공통되는 데이터만 조회
ㄴ SELF JOIN : 하나의 테이블에서 서로 조인
ㄴ NATURAL JOIN : 중복되는 컬럼을 하나로 조회

- OUTER JOIN
ㄴ LEFT OUTER JOIN : 공통된 데이터랑 왼쪽에 있는 테이블의 데이터 조회
ㄴ RIGHT OUTER JOIN : 공통된 데이터랑 오른쪽에있는 테이블의 데이터 조회
ㄴ FULL OUTER JOIN : 왼쪽에만 있는데이터, 오른쪽에만 있는 데이터, 공통적으로 들어가는데이터를 조회

쓰는법
SELECT 컬럼명 ...
FROM 테이블A A JOIN 테이블B B
ON A.공통컬럼 = B.공통컬럼;

VIEW
가상의 테이블
DUAL -> 1회성 조회를 하고 저장X
VIEW -> 저장이 가능하다.

복잡한 형태의 SELECT문을 기준으로 가상의 테이블을 생성

CREATE OR REPLACE VIEW 뷰이름 AS(
    쿼리문
)

SELECT * FROM 뷰이름;

외부에서 DB로 편리하게 요청이 가능하다.

VIEW의 특징

독립성
실행될 때마다 내부의 쿼리문을 실행하는 것
원본테이블이 변경되면 알아서 같이 변경된다.

편리성
복잡한 쿼리문을 VIEW로 생성함으로써 관련 쿼리를 단순하게 만들어줄 수 있다

보안성
뷰를 생성할 때 민감한 정보가 들어있는 컬럼은 빼고 생성할 수 있다.

TCL(Transaction Controll language)
트랜잭션 제어어

트랜잭션 : 한 문장의 쿼리문

트랜잭션 종류
- COMMIT : 실행한 쿼리문을 데이터베이스에 적용
  ㄴ 실행되어 있는 쿼리문을 전부 적용
- ROLLBACK : 실행한 쿼리문을 취소
  ㄴ 실행되어 있는 쿼리문을 전부 취소
- SAVEPOINT : 
  ㄴ ROLLBACK을 하면 전부 취소되니까 전부 취소되는걸 중간에 방지
  ㄴ 중간 저장지점을 만든다고 생각하면 된다.

트랜잭션의 특성

1. 원자성(Atomicity)
- 트랜잭션에 정의된 연산들은 모두 실행되거나 전혀 실행되지 않은 상태로 남아야 한다.

2. 일관성(Consistency)
- 트랜잭션 실행 전의 내용이 잘못되지 않았다면 트랜잭션 실행후 에도 잘못되어 있으면 안된다.

3. 고립성(Isolation)
- 트랜잭션 실행 도중에 다른 트랜잭션의 영향을 받아 잘못된 결과를 만들어내면 안된다.

4. 지속성(Durability)
- 트랜잭션 실행이 성공적일 때, 그 트랜잭션이 갱신한 데이터베이스 내용은 영구적으로 저장된다.

CASE문

CASE
  WHEN 조건 THEN 실행문
  ELSE 실행문
END;

테이블의 각 행의 데이터를 WHEN의 조건과 차례대로 비교한 후
일치하는 값을 찾아 THEN에 있는 실행문이 작동한다.

ELSE라도 있으면 ELSE에 있는 명령이 실행되고 값을 반환하는데
ELSE가 없으면 NULL값을 반환

SELECT,WHERE절에서 사용이 가능하다.
중첩사용 가능

PL/SQL
원래 SQL문의 경우는 확장해서 프로그래밍적(절차적)특성을 가지게 하는 언어

블록구조로 이루어져 있음
DELCLARE
    변수, 상수, 커서(CURSOR)
BEGIN
    실제로직(프로그램의 본문)이 작성되는 부분
END

IF,FOR, WHILE

IF조건식 THEN 명령
ELSIF 조건식 THEN 명령
ELSIF 조건식 THEN 명령
ELSE 명령
END IF;

FOR 변수 IN 시작값 .. 종료값 LOOP
  반복하고자 하는 명령
END LOOP;

FOR 변수 IN 쿼리문 LOOP -> 쿼리문으로 실행된 행만큼 반복
  반복하고자 하는 명령
END LOOP;

프로시저
데이터베이스에 저장되어 필요할 때마다 호출할 수 있는 이름이 있는 PL/SQL블록
- 재사용성이 높고, 매개변수에 값을 전달받아서 다양한 작업을 수행할 수 있다.

CREATE OR REPLACE PROCEDURE 프로시저명(
        매개변수 타입(크기),
        매개변수 타입(크기)
)
IS
  프로시저 내부에서 사용할 변수, 상수를 선언
BEGIN
  실행로직
END






























