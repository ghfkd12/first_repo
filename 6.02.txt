리액트 네이티브에서는 화면이동을 지원하지 않는다.
그래서 외부 라이브러리가 필요하다

npm install @react-navigation/native
리액트 네이티브에서 가장 많이 쓰이는 React Navigation라이브러리의 핵심 패키지이다.

스택, 탭, 드로어같은 화면전환 네비게이션 기능을 제공하는데,
여기서 네비게이션켄텍스트와 네비게이션상태를 관리하는 기능을 담당한다.
ㄴ NavigationContainer
네비게이션 최상단에 있어야 하는 컴포넌트
네비게이션이 동작하려면 이 컴포넌트로 감싸야한다.(반드시 최상단에 있어야한다)

useNavigation()
현재 스크린의 navigation객체를 얻어와서 화면 이동같은 네비게이션 기능을 사용할 수 있게 해준다.
이 navigation객체는 원래 스크린 컴포넌트의 props로 자동 전달이 되지만,
컴포넌트가 스크린이 아니거나 더 깊은 하위컴포넌트 에서는 props로 바로 받을수가 없다.
이 때, useNavigation을 써서 사용할 수 있다.

스택 네비게이터
화면위에 화면을 쌓는방식
npm install @react-navigation/stack
리액트 네이티브에서 Stack Navigator를 구현할 수 있게 해주는 패키지
1. createStackNavigator()함수를 제공한다
스택 네비게이터를 생성하는 함수
반환되는 객체안에 Navigator, Screen컴포넌트를 포함하고 있다.

Stack.Navigator컴포넌트
스택네비게이션을 설정하는 컴포넌트
여러개의 Screen컴포넌트를 포함할 수 있다.
ㄴ screenOptions : Navigator가 감싸고있는 모든 스크린에대해 설정을 적용한다.

Stack.Screen
스택안에 들어가는 하나의 화면
ㄴ 이름과 컴포넌트를 지정해야한다.
ㄴ options : 해당 스크린에만 설정을 적용한다.

탭 네비게이터
풋쪽에 버튼을 만들어서 누르면 화면이 이동되는 방식
npm install @react-navigation/bottom-tabs
리액트 네이티브에서 하단 탭 네비게이션을 만들기 위해 사용하는 라이브러리

인스타그램 하단 탭
유튜브 하단 탭
카카오톡 하단 탭

createBottomTabNavigator() : 하단 탭 네비게이터를 생성하는 함수

Tab.Navigator

Tab.Screen

네비게이션별 설정의 우선순위
1. navigation.setOptions()
2. Screen의 options
3. Navigator에 screenOptions

Drawer Navigation
화면을 옆에서 슬라이드하여 나타나는 메뉴를 통해 다른 화면으로 이동할 수 있게 해준다.
주로 좌측이나 우측에서 나타나는 메뉴 형식으로 구현되며,
사용자 경험을 높이는데 도움이 된다.
- 앱의 주요 메뉴나 설정 화면등 쉽게 접근할 수 있는 화면을 배치할 때 유용하다.

DrawerContentScrollView
드로어에 들어가는 내용을 스크롤할 수 있게 해주는 컴포넌트
안에 들어가는 모든 내용은 이 ScrollView안에 있어야 드로어가 길어졌을 때 스크롤이 가능하다.

DrawerItemList
Drawer.Navigator에 등록된 스크린들을 자동으로 메뉴 항목으로 만들어주는 컴포넌트

<DrawerItemList {...props} /> 이렇게 쓰면 된다

채팅 프로그램 만들기
구현할 기능
로그인/회원가입 :  이메일과 비밀번호를 이용한 로그인ㅇ과 회원가입
프로필 : 나의 정보 확인 및 변경
채널 생성 : 채널 생성 기능
채널 목록 : 생성된 채널들의 목록 조회
채널 : 실시간으로 메세지를 송수신하는 공간

네비게이션
로그인등 인증하는 화면
채팅방 목록 등을 확인할 수 있는 화면
메세지를 주고받는 화면
화면은 유기적으로 연결되어 있으며 화면간의 이동은 잦을것이다.

네비게이션 라이브러리 설치

프로젝트를 진행하면서 필요한 라이브러리를 사용해볼 예정이다.

expo-image-picker
기기의 사진이나 영상을 가져올 수 있도록 시스템 UI에 접근할 수 있는 기능을 제공한다.

moment
시간을 다양한 형태로 변경하는 등 시간과 관련된 많은 기능을 제공하는 라이브러리로,
날짜와 관련된 라이브러리중 가장 널리 알려져있고 많이 사용된다.
타임스탬프를 사용자가 보기 편한 형태로 변경하기 위해 사용할 예정이다.

react-native-gifted-chat
메세지를 주고받는 채팅화면을 쉽게 구현할 수 있도록 돕는 라이브러리

파이어베이스
구글에서 제공하는 클라우드 기반 개발 플랫폼으로,
서버리스 어플리케이션을 쉽게 개발하고 배포할 수 있도록 다양한 백엔드 서비스를 제공한다.
주로 모바일앱과 웹 어플리케이션 개발에 사용되며,
실시간 데이터베이스, 인증, 클라우드 저장소, 푸시 알림등의 기능을 손쉽게 구현할 수 있다.

주요 기능과 서비스
1. Firebase Authentication
- 다양한 인증 방식을 지원하여 사용자의 로그인과 회원가입을 간편하게 구현할 수 있다.
- 이메일/ 비밀번호, 전화번호, 소셜로그인, 익명 인증등을 제공 한다.

2. Firebase Realtime Database
- 클라우드 기반의 NoSQL 데이터베이스로, 데이터가 실시간으로 동기화된다.
- 사용자가 데이터베이스의 업데이트를 즉시 받을 수 있어 실시간 채팅, 라이브 업데이트 기능등을 구현할 때 유용하다.

3. Cloud Firestore
- 확장성과 유연성을 갖춘 NoSQL문서형 데이터베이스로,Realtime Database와 유사하지만 더 강력하고 복잡한 쿼리를 지원한다.

4. Firebase Storage
- 이미지, 동영상, 파일등을 저장하고 관리할 수 있는 클라우드 스토리지 서비스이다.
- 대용량 파일을 안전하게 저장하고, 업로드 및 다운로드 기능을 손쉽게 구현할 수 있다.

5. Firebase Cloud Messaging(FCM)
- 푸시 알림을 전송할 수 있는 무료 메세징 서비스이다
- 기기간의 푸시알림이나 주제별 메세지를 손쉽게 전송할 수 있어서 사용자에게 실시간 알림을 보낼 때 유용하다.

 6. Firebase Hosting
- 정적 웹사이트나 단일 페이지 어플리케이션(SPA)을 위한 빠르고 안전한 호스팅 서비스이다.
- Firebase CLI를 통해 빠르게 배포할 수 있으며, SSL인증서가 자동으로 적용되어 안전한 HTTPS통신을 제공한다.

앱 아이콘과 로딩화면
- 프로젝트의 기능과 화면 개발에 앞서 앱의 아이콘과 로딩화면을 변경해보자.

expo-splash-screen
앱이 실행될 때 사용자에게 보여지는 초기화면(스플래시 화면)을 관리하는 패키지

스플래시 화면 : 앱을 켜면 뜨는 로딩화면
쓰는이유 : 앱이 준비되기 전에 빈 화면이나 버벅이는 화면이 보이면 유저는 좋게 생각을 안한다.
- 앱이 필요한 리소스(글꼴, 데이터, 이미지 등)를 다 로드할 때까지 기다렸다가 사용자에게 보여줄 수 있다.

인증화면
- 파이어베이스의 인증 기능을 이용해서 로그인화면과 회원가입 화면을 만들어보자
- 인증을 위해 이메일과 비밀번호가 필요하므로 로그인 및 회원가입 화면에서는
이메일과 비밀번호를 필수로 입력받고, 회원가입 시 사용자가 서비스에서 사용할 이름과 프로필 사진을 받도록 화면을 구성한다.



