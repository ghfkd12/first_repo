JPA의 활용
영속계층에서 DB와 통신

쿼리메서드
쿼리를 직접 작성하는것이 아닌 메서드를 통해서 쿼리문을 자동으로 작성한다.

1. 추가or수정
save()

2. 조회
find()
findById() : ID로 데이터를 조회한다.
findAll() : 모든 데이터를 조회한다.

3. 삭제
deleteById() : ID로 데이터를 삭제한다.

4. 카운트
count() : 데이터의 총 개수를 반환한다.

@Repository
interface TodoRepository extends JPARepository

요청
-> url과 맞는 컨트롤러로 매핑이 된다
-> 컨트롤러 메서드에서 service를 호출한다
-> service메서드에서 repository를 호출한다.
-> repository에서 DB와 통신해서 데이터를 얻어온다.
-> 서비스로 반환
-> 컨트롤러로 반환
-> 응답

수정

타이틀 변경을 위해 input의 필드에서 사용자가 입력을 받아올 때 editEventHandler()에서 item을
바로 넘겨버리면 한글자씩 입력할 때 마다 HTTP요청을 보내게 된다.
- 이는 비효율적이기 때문에 수정을 완료한 시점에서 HTTP요청을 보내고 싶다
- 입력이 끝나서 수정이 불가능한 상태로 바뀌는 시점

사용자 관리 시스템
- 사용자의 정보를 관리하는 기능을 갖는 API만들기

1. 프로젝트 만들기
start.spring.io에서 프로젝트 생성하기
group : com.korea
arifact : user
필요 라이브러리
Spring Web
h2
lombok
Spring Data JPA

com.korea.user.model패키지
UserEntity클래스 만들기
- 유저는 id, name, email필드를 갖는다
- id는 자동으로 값을 부여한다.

com.korea.user.dto패키지
UserDTO클래스 만들기
- UserDTO는 id,name,email필드를 갖는다
- DTO에서 Entity, Entity에서 DTO로 변환할 수 있는 기능이 있다.

com.korea.repository패키지
UserRepository인터페이스 생성
- JpaRepository를 상속받는다.
- 이메일을 통해 유저를 찾는 findByEmail추상메서드를 추가한다.

com.korea.user.service패키지 생성하기
UserService 클래스 생성하기
- 사용자를 생성하는 create메서드 만들기
- 생성하고 추가가 잘됐는지 조회 결과를 반환한다.

com.korea.user.controller패키지 생성하기
UserController클래스
- mapping : /users
유저를 추가하는 createUser메서드 작성하기
ㄴ 반환형은 ResponseEntity

2. 모든 사용자 조회 기능 만들기

3. 이메일을 통해 사용자 검색하는 기능 만들기
3-1. @PathVariable 사용하기




























