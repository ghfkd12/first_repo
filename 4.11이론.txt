1. 바이트- 문자간 변환
InputStreamReader는  System.in과 같이 바이트 단위로 제공되는 데이터를 문자로 변환

2. bufferedREader와의 호환성
bufferedReader는 문자깁나 입출력을 위한 클래스 이므로, Reader객체가 필요하다.
InputStreamReader를 이용해 System.in(바이트 스트림)을 문자 스트림으로
변환하여 BufferedReader에 전달함으로써, 한줄 단위의 입력등 문자 단위 처리가 가능해진다.

Enumeration(열거형)
1. 관련된 상수들을 하나의 그룹으로 묶어 표현할 수 있는 특별한 클래스
2. 열거형 안에 정의되는 각 상수들은 열거형 타입의 객체이다.
3. 상수들 외에도 필드, 생성자, 메서드를 가질 수 있다.
4. java의 enum은 클래스 수준의 기능을 제공하는 객체이다.

public enum 열거형 이름{
     상수, 상수,  상수;
}


생성자를 직접 호출하는 것이 아닌 getInstance()라는 메서드를 통해 이미 만들어진 객체를 불러올 수 있다.

열거형 변수명 = 열거형.상수

열거형.value() : 모든 상수의 정보를 배열로 반환

valueOf("상수명") : 매개변수로 전달된 문자열을 통해 상수를 찾는다.

switch에서 사용할 수 있다.
switch(){
  case 상수명: case에 쓸때는 열거형 타입을 붙일 필요 없다.
}

열거형을 쓰는 이유
1. 상수를 안전하게 관리할 수 있다.
2. 가독성이 높아진다.
3. 기능확장에 유리하다.

enum은 단순 상수 집합이 아니라 필드, 생성자, 메서드도 가질 수 있기 때문에
상태값에 따라 동작을 다르게 만들 수 있다.

추상메서드를 정의하고, 각 상수마다 구현을 해서 각기 다른 동작을 할 수 있다.

어노테이션
프로그램의 소스코드안에 다른 프로그램을 위한 정보를 미리 약속된 형태로 포함시킨것

메타어노테이션
사용자 정의 어노테이션을 만들기위한 어노테이션
@Target : 어노테이션이 적용될 수 있는 위치(필드, 메서드, 클래스 등)
@Retention : 어노테이션의 유지 범위를 지정(런타임, 컴파일 등)
@Documented : Javadoc문서에 어노테이션정보 포함 여부
@Inherited : 자식 클래스에게 상속될 수 있는 어노테이션 여부

어노테이션 선언 시 규칙 정리

1. 선언 키워드는 @interface

public @interface MyAnnotation{

}

2. 어노테이션 속성은 메서드형태로 정의해야한다.
- 추상메서드 형태로 정의해야 한다.

public @interface MyAnnotation{
          String value(); default "홍길동";
          int version();
}

3. 속성의 반환타입은 제한적이다.
기본타입, String, class<?>, 열거형, 다른 어노테이션, 배열

4. 속성이름이 value일 경우 특별 규칙
@MyAnnotation(value = "xxx")
@MyAnnotation("xxx") -> 속성 이름이 value일 경우 생략 가능

5. 어노테이션 자체에는 예외를 던질 수 없다.
- 어노테이션 속성은 단순 선언만 가능하고 예외, 로직, 조건문 등은 포함할 수 없다.
String value() throws Exception; -> 불가능

6. 속성은 매개변수를 가질 수 없다.
String name(String input); -> 불가능

리플렉션(Reflection)
클래스, 메서드, 필드, 생성자 등의 정보를 프로그램 실행 중에 동적으로 조사하거나 조작할 수 있는 기능

리플렉션 API의 핵심 클래스
Class<?>    : 클래스의 메타 정보를 저장할 수 있는 클래스
Field       : 클래스의 필드를 표현
Method      : 클래스의 메서드를 표현
Constructor : 생성자를 표현
Annotation  : 어노테이션 정보를 표현






















