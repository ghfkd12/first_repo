클래스에 @Component를 붙이면 스프링컨테이너에 객체가 저장된다

@Component의 자식 컴포넌트
스프링이 객체로 만들어서 저장해준다.

표현계층
@RestController
영속계층
@Repository
@Service
@Configuration

레이어드 아키텍처

표현계층
요청이 들어왔을 때 받거나, 응답을 내보내는 계층
메서드형태로 관리한다.
@RestController
@RequestMapping
@GetMapping("uri") : Get요청으로 들어왔을 때 메서드와 연결
@PostMapping("uri") : Post요청으로 들어왔을 때 메서드와 연결

@RequestParam(속성들) : Get요청으로 들어올 때 url뒤에 퀴리스트링에 들어있는 값을 함수의 매개변수로 받을 수 있다.
ex) www.examapi.com?name=xxx&age=xxx
: name뒤부터 쿼리스트링 부분 get요청일때만 쓴다.
- value = "이름" : 파라미터의 이름을 명시, 매개변수와 이름이 같으면 생략가능
- defaultValue = "값" : 요청에 해당 파라미터가 없을 때 기본값을 지정
- required = 논리값 : 해당 파라미터가 필수인지 여부를 설정, 기본값은 true이며 파라미터가 없으면 예외가 발생한다.

@PathVariable : URL경로에서 값을 추출하여 메서드의 매개변수로 값을 전달할 때 사용한다.
ex) /users/123 : id부분에 123이 들어간다.
@GetMapping("/users/{id}")
public String getUser(@PathVariable("id") Long id){
    return "User ID : " + id;
}
- value = "이름" : 경로 변수 이름을 명시
- required = 논리값 : 경로에 있는 값을 매핑하는경우가 많아서 false를 많이 쓰지 않는다.
- 정규식을 통해서 들어오는 값을 제한할 수 있다.
@GetMapping("/users/{id:[0-9]+}") 

@RequestBody
POST, PUT요청은 URL에 데이터표시가 안된다.
HTTP요청의 본문(body)에 담긴 데이터를 자바 객체로 변환하여
컨트롤러 메서드의 매개변수로 전달하는데 사용하는 어노테이션이다.

주요기능
1. HTTP요청 본문 처리
요청이 들어올 때 JSON이나 XML형식으로 보내진다.
스프링이 자동으로 자바객체로 변환한다.

@ResponseBody
컨트롤러 메서드의 반환값을 HTTP응답의 본문(body)레 직접 포함시킬 때 사용된다.
주로 JSON, XML, 문자열과 같은 데이터를 클라이언트에게 반환하는데 사용한다.

서비스계층
표현계층과 영속계층 사이에서 프로젝트의 핵심기능을 수행하는 역할을하는 계층이다.

@Service : 주로 비즈니스 로직을 처리하는 클래스에 붙인다.
Service어노테이션이 붙어있는 클래스는 스프링 빈(bean)으로 등록되어 다른쪽에서 주입되어 사용할 수 있다.

영속계층
영속성을 관리하는 계층
데이터베이스와 맞닿아있는 계층

영속성은 시스템이 종료되더라도 변경된 내용이 보존되는 성질을 말하며,
영속성 계층은 이를 구현하는 역할을 한다.

주요역할
1. 데이터 저장
2. 데이터 조회
3. 데이터 수정
4. 데이터 삭제

영속계층의 구현방식
주로 ORM(Object-Relational Mapping)도구를 사용하여 데이터베이스와 객체간의 매핑을 처리한다.

ORM은 객체 지향 프로그래밍언어에서 사용하는 객체와 관계형 데이터베이스에서 사용하는 테이블 간의 매핑을 자동으로 처리해주는 기술이다.

JPA(Java Persistence API)
자바에서 가장 널리 사용되는 ORM 프레임워크로, 객체와 관계형 데이터베이스 간의 매핑을 처리한다.

@Entity클래스를 정의해서 데이터베이스의 테이블과 매핑해야한다.

Spring Data JPA
1. 데이터베이스 테이블과 1대1로 매핑할 Entity클래스 생성하기
- @Entity어노테이션을 사용하여 설정한다.
@Table(name="테이블명")
데이터 베이스에있는 테이블을 검색해서 매핑
@Id
엔티티의 기본키로 설정
@GeneratedValue
기본키 값을 자동으로 생성하도록 지정한다.

2. JPA Repository(CRUD작업)
JPA를 사용할 때 Repository 인터페이스를 정의하여 CRUD작업을 처리할 수 있다.
Spring Data JPA에서는 JpaRepository를 사용하여 기본적인 CRUD작업을 쉽게 처리할 수 있다.

영속계층의 구현
@Repository를 붙힌 레파지토리 클래스를 정의
JpaRepository를 구현한다.

Spring Data JPA에서 기본적으로 제공하는 메서드
1. 저장
- save() : 엔티티를 저장하거나, 이미 존재하는 엔티티를 업데이트한다.

2. 조회
- findById() : ID로 엔티티를 조회한다. 반환값은 Optional이다.
- findAll() : 모든 엔티티를 조회한다.

3. 삭제
- delete() : 특정 엔티티를 삭제한다.

4. 카운트
- count() : 엔티티의 총 개수를 반환한다.

5. 존재여부 확인
- existsById() : 특정 ID가 존재하는지 확인한다.

직접작성하는 메서드
메서드 이름을 기반으로 자동으로 쿼리를 생성하는 기능을 제공한다.

기본규칙
접두어
findBy : 주어진 조건으로 엔티티를 찾는다.
ex) findByName(String name); // 이름으로 사용자 조회

countBy : 특정 조건을 만족하는 레코드 개수를 반환
ex) countByAge(int age); 

existBy : 특정 조건을 만족하는 레코드가 존재하는지 확인
ex) existsByEmail(String email);

deleteBy : 주어진 조건에 해당되는 레코드 삭제
ex) deleteByName(String name);

2. 조건의 결합
And/Or

findByNameAndEmail(String name, String Email);
findByNameOrEmail(String name, String Email);

로그
소프트웨어 시스템이나 어플리케이션 동작상태, 이벤트가 발생했을 때 그 내용들을 기록한 정보
주로 개발자, 운영자 또는 시스템이 해당 어플리케이션의 상태를 파악하거나 문제해결을 위해 사용한다.
주로 어플리케이션의 실행흐름, 오류 또는 성능 문제를 추적하고 분석하는데 매우 중요한 도구이다.

로그의 주요 목적
1. 디버깅
- 어플리케이션에서 발생한 문제나 버그를 추적하고 원인을 파악하기 위해 사용된다.
	
2. 모니터링
- 어플리케이션이 예상대로 작동하는지 확인하고, 시스템 성능을 모니터링 하기위해 사용된다.
	
3. 문제해결
- 어플리케이션이 예상치 못한 상황이 발생했을 때 로그를 통해 그 문제를 해결하는데 필요한 정보를 얻을 수 있다.
	
4. 보안감사
- 어플리케이션에 대한 보안 감사 및 추적을 위해 사용된다.
- 시스템에 대한 접근 시도나 비정상적인 활동을 로그로 기록하여, 보안 위협을 감지하고 대응할 수 있다.

로그의 주요 구성요소
1. 타임 스탬프 : 로그가 기록된 시간
2. 로그레벨(Log level) : 로그의 중요도를 나타낸다.
- 트레이스(Trace) : 가장 낮은 수준의 로그
- DEBUG : 개발과정에서 주로 사용되는 디버깅 정보
- INFO : 시스템의 정상적인 동작을 나타내는 정보
- WARN : 예상치 못한 오류가 발생했지만 시스템이 정상적으로 동작하는 경우
- ERROR : 오류가 발생했으며, 시스템이 정상적으로 동작하지 않는 경우
- FATAL : 매우 심각한 오류로, 시스템이 더이상 동작할 수 없는 경우
3. 메세지 : 로그에 기록된 이벤트에 대한 설명
4. 이벤트 소스 : 로그가 기록된 위치

Slf4j(Simple Logging Facade for Java)
자바 어플리케이션에서 사용하는 로깅 프레임워크에 대한 통합된 인터페이스를 제공하는 로그 추상화 라이브러리이다.
	
Create Todo 구현
	- Todo 아이템을 생성하는 기능을 구현해보자.
	
	영속 레이어의 구현
	- 엔티티를 저장하기 위해 save()메서드를 사용하고,
	- 새 Todo리스트를 반환하기 위해 findByUser()메서드를 사용한다.
	
	서비스 레이어
	- Todo아이템을 생성하기 위한 비즈니스로직을 작성한다.
	- create()메서드를 작성한다.
	
	create()메서드의 구성
	- 검증
	- 넘어온 엔티티가 유효한지 검사하는 로직
	- 검증하는 로직이 너무 커지게 되면 TodoValidator로 분리한다.
	
	- save()
	- 엔티티를 데이터베이스에 저장
	- 로그를 남긴다.
	
	- findByUserId()
	- 저장된 엔티티를 포함하는 새 리스트를 반환한다.
	
























