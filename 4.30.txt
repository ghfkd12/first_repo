스프링부트 프레임워크
프로젝트를 만들면 뼈대는 만들어져 있다.

스프링에서 스프링부트로 넘어온것
스프링에서도 설정을 직접 해줘야 하는것들이 꽤 많았다.

스프링부트로 넘어오면서 좀 더 많은것들이 자동으로 설정된다.

배포의 원리
프로젝트 배포 -> jar, war파일로 나온다. -> 웹서버의 경로에 넣어주고 웹서버를 가동해서 외부에서 내 프로젝트를 사용할 수 있게 해준다.

스프링부트는 웹서버를 내장하고있기 때문에 따로 설정이 필요하지 않다.

알아두면 좋은 특징 

제어역전(IoC)
전통적인 방식 : 개발자가 직접 객체를 생성하고 관리
제어역전 방식 : 컨테이너가 어플리케이션 동작에 필요한 객체를 생성, 관리
              -> 개발자는 '필요한 객체가 있다'라는 선언만 하면 된다.

의존성 주입(Dependency Injection)
제어역전을 구현한 대표적인 기법
의존관계가 필요한 곳에 스프링이 직접 객체를 연결해준다.

1. 필드에 직접 주입하기
2. setter를 이용해 주입하기
3. 생성자를 이용해 주입하는 방법

3 -> 1 -> 2번순으로 많이 사용한다.

스프링부트가 객체를 메모리에 올리는 방법
Main클래스에 @SpringBootApplication어노테이션에 들어있는
@ComponentScan 어노테이션이 Main클래스가 들어있는 패키지를 모두
탐색하면서 @Component 어노테이션이 붙어있는 클래스를 모두 메모리에 올린다.

Map형식으로 저장을 하는데 key를 클래스의 이름에서 첫글자를 소문자로 바꾸고 저장,
value의 객체를 저장한다.
map.put("Computer" , new Computer()); 이런 형식으로 저장한다.
ㄴ 스프링을 통해서 메모리에 올라간 객체를 Bean이라 부른다.

스프링은 기본적으로 싱글톤 패턴을 지원하고있다.

스프링 객체 컨테이너에 한 개의 객체만 생성된다.

어플리케이션 전반에서 같은 빈을 공유하기 때문에 메모리를 절약하고,
bean간의 상태 공유가 가능하다.

gradle
프로젝트의 전반적인 설정들을 관리

롬복(lombok)
반복생성되는 코드들을 줄이기위해 어노테이션 형식으로 선언할 수 있게 해준다.

포스트맨
우리가 설계한 api가 잘 동작하는지 확인하기위한 툴

레이어드 아키텍처
프로그램을 기능별로 계층으로 분리하여 구조화하는 설계 패턴
각 계층별 기능이 존재하고, 상위 계층은 하위 계층의 구현에 의존하지 않고
인터페이스를 통해서만 상호작용 하도록 만든다.

기본개념
계층 분리
기능별로 관심사를 분리하여 모듈화한다.
변경이 필요한 부분은 한 계층에 국한되므로 유지보수성이 향상된다.
상위 계층은 하위 계층에만 의존한다.
하위 계층은 상위 계층에 대한 정보가 없어야 한다.

계층간 직접 구현 참조를 피하고, 인터페이스나 추상클래스를 통해 결합도를 낮춘다.

계층의 종류

표현계층(Presentation Layer)
사용자(UI)와 상호작용하는 부분
요청을 받거나, 응답을 통해 화면을 전달하거나, 데이터를 전달한다.

이론적으론 표현계층이라 표현하고 코드로 작성할 때에는 Controller라고 작성한다.

비즈니스 계층(Business Layer)
어플리케이션의 핵심 로직을 처리
트랜잭션 관리, 도메인 객체간 연산, 외부 시스템 호출 조정 등

비즈니스 계층을 구현하는 것은 Service라는 이름으로 클래스를 만든다.

영속계층(Persistence Layer)
데이터 저장,조회,삭제,수정 같은 영구 저장소와의 상호작용
SQL, ORM매핑, 트랜잭션 커밋 등

영속계층을 구현하는 클래스는 Repository라고 이름붙인다.

요청을 통해 들어오거나 응답을 통해서 나가는 데이터가 존재할 때
데이터를 담는 추상적인 개념을 Model이라고 한다.
Model : 데이터를 주고 받을 때 데이터를 담는 저장소

계층간의 데이터를 주고받을 때는 DTO(클래스)라 한다.

DTO(Data Transfer Object)
클라이언트 -> 컨트롤러 -> 서비스
서비스 -> 컨트롤러 -> 클라이언트
Entity에 들어있는 민감한 사항(개인정보, 스키마)의 노출을 방지할 수 있다.

Entity
데이터베이스와 통신할 때 사용하는 클래스
데이터베이스 테이블과 1:1매핑

@RequestMapping("주소")
해당 컨트롤러의 공통적인 부분의 주소를 갖고 있다.

@GetMapping("주소")
Get으로 요청이 들어오고 주소가 맞을 때 메서드를 실행해준다.

@PathVariable
- URL경로의 일부를 변수로 사용할 수 있도록 지원하는 어노테이션
- URL에 포함된 값을 동적으로 받아와 메서드의 매개변수로 사용할 수 있다.
{}템플릿 변수와 매개변수의 이름이 같을 때 스프링이 요청  URI에서 값을 추출해 자동으로 변수를 채워준다.




























