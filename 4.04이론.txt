제네릭
- 타입을 컴파일시 결정하는게 아닌 실행할 때 결정
- 타입변수<T> 클래스, 인터페이스, 메서드에 붙일 수 있다.

컬렉션
- 여러개의 데이터를 저장하기 위한 자료구조
- Lits, Set, Map인터페이스가 존재한다.

- ArrayList<T> : 배열처럼 사용
ㄴ 인덱스가 있다, 배열기반이다, 조회에 유리하다(검색이 빠름)

- HashSet<T>
ㄴ 인덱스가 없다, 순서가없다, 중복이 없다.

- HashMap<T>
ㄴ key-value의 쌍으로 이루어져 있다.

map
put()
putIfAbsent()
gerOrDefault()
get()
keySet() -> map에 들어있는 key전부를 Set으로 만들어서 반환
values() -> map에 들어있는 value전부를 Collection타입으로 반환
entrySet() -> key-value 한쌍을 Entry타입으로 반환
ㄴ entry.getKey() ->  key를 얻어올 수 있다.
ㄴ entry.getValue() -> value를 얻어올 수 있다.


스트림
1-1. 배열을 통한 객체의 생성
Arrays.stream(T[] arr)

1-2. 컬렉션을 통한 객체 생성
컬렉션.stream()메서드가 존재한다.

1-3. Stream.of() 메서드로 직접 생성
Stream.of(1,2,3,4,5)

1-4. Stream.empty()
비어있는 스트림 생성

2 중간연산
생성된 스트림 객체로부터 가공과 필터링을 거치는 작업

distinct() -> 중복 요소 제거
filter(조건) -> 조건에 맞지않으면 제거
map(기능) -> 요소들에 대한 변경
limit(long) -> 앞에서 n개 추출
skip(long) -> 앞에서 n개 건너뜀
peek() -> 요소를 본다(디버깅용으로 많이 쓴다)

스레드
main 이 실행이 될 때 동시에 실행하려고 하는것

Thread 상속
단일 상속만 가능
간단한 구현
Thread클래스를 직접 다룰 수 있다.

Runnable 구현
다른 클래스 상속과 병행 가능
더 유연한 구조 가능
Runnable은 실행 코드만 담고 Thread는 별도로 생성한다.

start()메서드는 스레드를 시작(내부적으로 run()호출)
























