Context API
상태를 전역적으로 관리할 수 있다.

최상위 컴포넌트에서 하위 컴포넌트를 많이 거쳐야 할 때 중간단계 컴포넌트들을 거쳐야하는 문제가 있다

특정 데이터를 사용하지 않는 중간 컴포넌트들고 props를 받은 다음에 자식 컴포넌트로 전달해야 하기 때문에
코드가 복잡해지고 가독성이 떨어지며, 유지보수가 어려워진다.

개발할때 유지보수와 확장성을 염두에 두는게 중요하다.

컴포넌트가 특정 데이터와 강하게 결합이되면 해당 컴포넌트를 다른곳에서 사용하기 어려워진다.
개별적으로 사용하려고 만든 컴포넌트인데 독립적으로 사용하는것이 어려워질 수 있다.

상태의 관리와 동기화에 어려움을 겪을 수 있다.
상태가 상위 컴포넌트에 위치하고, 컴포넌트의 계층이 깊을수록 상태를 업데이트하는 과정이 복잡해진다.
상위에서 하위로 데이터를 전달하는 과정에서 버그가 발생할 가능성이 있다.

불필요한 재렌더링
상위 컴포넌트의 상태가 변경되면, 해당 상태를 전달받는 모든 하위 컴포넌트가 재렌더링된다.
계층이 깊어지면, 상태를 직접적으로 사용하지 않는 중간 컴포넌트까지 재렌더링될 수 있다.

Provider
Context에 있는 Provider컴포넌트는 하위 컴포넌트에 Context변화를 알리는 역할을 한다.
Provider컴포넌트는 value를 받아서 모든 하위 컴포넌트에 전달하고, 하위 컴포넌트는 value가 변경될 때마다 다시 렌더링 된다.

react-native-context 참조

App컴포넌트를 Provider컴포넌트로 감쌌기 때문에 User컴포넌트에서 사용된 Consumer컴포넌트는 더이상 Context의 기본값을 사용하지 않고 Provider컴포넌트가 전달하는 데이터를 사용하도록 변경되었다.

