REDUX
context api의 확장
상태관리 라이브러리 어플리케이션 전역에서 사용하는 상태를 예측 가능하게 관리하도록 도와준다.

주요구성요소
Store
어플리케이션의 단일상태 트리를 보관하는 장소

Action
state에 어떤 변화가 일어나야하는지 설명하는 객체
반드시 type 프로퍼티를 가져야한다.
그 외 전달하고싶은 데이터를 payload에 담는다.

Reducer
현재 상태와 Action을 받아서, 새로운 상태를 반환하는 순수함수

*순수함수
주어진 입력만을 사용하여 결과를 도출하고, 함수 외부의 상태나 변수에 의존하지 않으며
부작용을 일으키지않는 함수
동일한 입력값에 항상 동일한 결과를 반환한다는 특징이 있다.
ex) function add(a, b) {
      return a+b;
}

add (2,3);
add (2,3);   -> 결과는 전부 5
add (2,3);

(state, action) => newState 형태로 작성한다.
불변성을 지켜 새 상태 객체를 반환해야한다.

디스패치
- 액션을 스토어에 전달하는 메서드
- 컴포넌트에서 디스패치를 통해 액션을 발생시키고, 리듀서가 상태를 업데이트 하도록 한다.

Action.js
화살표 함수에서 소괄호로 감싸면 묵시적으로 내용을 return한다.
중괄호라면 return을 적는다.

View(화면단)
Provider -> react-redux 패키지에서 제공하는 컴포넌트
내부적으로는 React Context API를 이용해, 하위에 있는 모든 컴포넌트가 store에 접근할 수 있도록 해준다.
ex) function App() {
    retrun(
      <Provider store = {store}>
        
      </Provider>
    )
}

스토어가 dispatch라는 함수를 제공한다.
useDispatch가 스토어가 제공하는 dispatch함수를 꺼내서 실행을 해주는것
디스패치가 리듀서로 액션을 제공하는 유일한 통로
function dispatch(action){
    현재 상태와 액션을 rootReducer에 전달
    currentState = rootReducer(currentState, action);
    currentListeners.forEach(listener => listener())
    return action
}

context api 선택
상태관리가 비교적 간단하고 작은 규모의 프로젝트일 때
추가적인 라이브러리 설치없이 빠르게 전역 상태를 관리하고 싶을 때
성능 최적화가 크게 필요하지 않은 경우

redux를 선택
어플리케이션의 상태관리가 복잡하거나 규모가 큰 경우
상태 변경 로직을 명확하게 분리하고 싶을 때

         




































