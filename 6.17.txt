HTTPS
- HTTP + 보안레이어
- 데이터를 암호화해서 주고받기때문에 도청, 위조, 변조로부터 안전하다.

HTTP의 기본포트 : 80번
HTTPS의 기본포트 : 443번

로드밸런서
- 서버에 대한 네트워크 트래픽을 효율적으로 분산시켜 여러 서버로 나누어 처리하는 장치 또는 소프트웨어이다.
- 로드밸런서를 사용하면 트래픽 부하를 분산시켜 각 서버에 가해지는 부담을 줄이고,
서버가 과부하로 인해 다운되는 것을 방지하여 어플리케이션의 성능과 가용성을 높일 수 있다.

Application Load Balancer(ALB)
- L7 로드밸런서로, HTTP및 HTTPS트래픽을 처리하며, 어플리케이션 기반 라우팅을 지원한다.

OSI 7계층
- 네트워크 통신과정을 7개의 계층으로 나눈 모델로, 컴퓨터 네트워크에서 통신이 이루어지는 방식과
각 단계의 역할을 명확하게 하기 위해 설계되었다.

L1(1계층) : 물리계층
- 물리적 매체를 통해 비트를 전송
L2 : 데이터 링크 계층
- 프레임 단위의 데이터 전송
L3 : 네트워크 계층
- IP주소 기반 경로 설정 및 라우팅
L4 : 전송계층
- 신뢰성있는 전송, 오류 검출, 포트기반 통신
L5 : 세션계층
- 세션관리, 대화제어, 데이터 동기화
L6 : 프레젠테이션계층
- 데이터 암호화/복호화, 데이터형식 변환
L7 : 응용계층(어플리케이션계층)
- 사용자와 네트워크간 인터페이스 제공

타겟그룹(Target Group)
- 로드밸런서가 트래픽을 분산시킬 대상을 정의하는 그룹
- 로드밸런서에 연결된 인스턴스, 컨테이너, IP주소 등의 리소스를 그룹으로 묶어 관리하며, 이를 통해 로드밸런서는 효율적으로 분배할 수 있다.

타겟
로드밸런서가 트래픽을 보내는 대상
AWS에서는 여러종류의 리소르를 타겟으로 사용할 수 있다.
EC2객체, Lamda함수, 컨테이너, IP주소 등이 될 수 있다.

인바운드 규칙
- 네트워크 보안이나 특정 인프라 시스템으로 들어오는 트래픽을 제어하는 규칙을 말한다.
- 주로 방화벽이나 보안 그룹 설정에 사용되며, 허용 또는 차단할 트래픽을 정의하는데 활용한다.

소스(source) : 어떤 IP주소 또는 IP범위에서 오는 트래픽을 허용할지 결정 -> IPv4로 오는 모든 요청

프로토콜(protocol) : 허용할 트래픽의 프로토콜을 설정한다.

포트(Port) : 특정 어플리케이션이 사용하는 포트를 지정하여 해당 포트로 접근하는 트래픽을 허용하거나 차단할 수 있다.
HTTP는 80, HTTPS는 433을 사용한다.

CI/CD
- 서비스를 배포하고 운영하던 중 코드를 변경할 일이 생기면 다시 빌드하고 배포해야했다.
- 프로젝트의 규모가 커지게되면 이 작업은 굉장히 힘들어진다.
- CI/CD를 도입하면 빌드부터 배포까지의 과정을 자동화할 수 있고, 잘 되는지 모니터링할 수 있다.

CI(Continuous Integration)
- 지속적인 통합
- 개발자를 위해 빌드와 테스트를 자동화하는 과정
- CI는 변경사항을 자동으로 테스트해 어플리케이션에 문제가 없다는것을 보장한다.
- 정기적으로 빌드하고, 테스트하므로 여러명이 동시에 작업을 하는 경우 충돌을 방지하고, 모니터링할 수 있다.
- 코드 변경사항이 코드 저장소에 업로드되면 CI를 시작하고, CI도중에 문제가 생기면 실패하므로 코드의 오류도 쉽게 파악할 수 있다.

CD(Continuous Deployment)
- 배포 준비가 된 코드를 자동으로 서버에 배포하는 작업을 자동화 한다.
- CI가 통과되면 개발자가 수작업으로 배포하지 않아도 자동으로 배포하니 매우 편리해진다.

SSH설정하기
SSH(Secure Shell)
- 네트워크를 통해 안전하게 원격 시스템에 접속할 수 있도록 해주는 프로토콜
- 주로 원격서버에 로그인하거나 명령어를 실행할 때 사용되며, 안전한 데이터 전송과 인증을 제공한다.
- 암호화된 통신 채널을 통해 데이터를 주고받기 때문에, 민감한 정보를 안전하게 보호할 수 있다.

주요기능
- 암호화된 통신 : 데이터가 전송되는 동안 제3자가 이를 가로채더라도 내용을 확인할 수 없도록 암호화된 통신을 제공
- 원격 접속 : 네트워크상의 다른 컴퓨터에 원격으로 접속하여 명령어를 실행하거나 파일을 관리할 수 있다.
- 인증 : 비밀번호 또는 공개 키 기반 인증을 통해 사용자 인증을 제공한다.
- 포트포워딩 : 포트포워딩을 통해 다른 네트워크 서비스에 대한 보안 통신채널을 생성할 수 있다.

SSH작동원리
1. 클라이언트와 서버간의 연결 : SSH클라이언트가 서버에 연결 요청을 보내면, 서버는 클라이언트에게 자신의 공개키를 보낸다.
2. 클라이언트 인증 : 클라이언트는 서버의 공개키를 사용해 암호화된 데이터를 전송하고, 서버는 자신의 개인키로 이를 해독해 클라이언트의 정당성을 확인한다.
3. 암호화된 통신 : 연결이 성공하면, 클라이언트와 서버간의 통신은 암호화된 채널을 통해 이루어진다.

git을 SSH로 접속하기 위해 인증 정보를 등록해야 한다.
pc마다 별도의 SSH키를 등록해야 한다.
터미널을 열고 SSH키를 생성하는 명령어를 입력한다.

ssh-keygen -t rsa -C "github메일주소"
기본값을 사용하도록 아무것도 입력하지 않는다.

github에 ssh키 넣기

